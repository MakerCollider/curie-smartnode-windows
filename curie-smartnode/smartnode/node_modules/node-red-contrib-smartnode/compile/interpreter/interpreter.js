module.exports = function(RED) {
    function interpreterNode(config) {
        var serialport = require('serialport');
        var fs = require('fs');
        var path = require('path');
        this.name = config.name;

        var node = this;
        RED.nodes.createNode(node, config);

        for (var i in globalArrayInjects) {
            globalArrayInjects[i].status = "init";
        }


        this.status({fill:"red",shape:"ring",text:"init"});
        var container =[];  

        var node_pro = require('./node-properties');
        includeArray = [];
        pointerArray = [];
        wiresArray = [];
        scriptBat = 'Common';  //Neurons、CurieIMU、Common、CurieNeuronsIMU
        operateLength = 0;
        operateValueLength = 0;

        var flowsFile = path.join(__dirname)+'../../../../../curie-flows.json';
        var strFlows = fs.readFileSync(flowsFile); 
        var flows = JSON.parse(strFlows);
        var newFlows = [];
        var arrayFlows = [];

        //remove interpreter node and tab
        for (n in flows) {
            if (flows[n].type != 'interpreter' && flows[n].type != 'serial-port' && flows[n].type != 'tab'){
                var obj = {
                    id:flows[n].id,
                    type:flows[n].type,
                    wires:flows[n].wires,
                    start:0
                };
                arrayFlows.push(obj);
            }
        }


        for (n in arrayFlows) {
            var nodeFlow = getNodeFlow(flows,arrayFlows[n]);
            if (nodeFlow != undefined){
                newFlows.push(nodeFlow);
            }
        }

        for (i in newFlows) {
        	if (newFlows[i].type == 'Neurons'){
        		setHeaderNode(newFlows,'Accelerometer');
        	}
        }


        if (newFlows.length==0){ //no nodes
           return;
        }

        var is_inject = false;
        var inject_objName = '';
        var strCode;
        strCode = node_pro.includeLibrary('QueueList');
        strCode += node_pro.includeClass('Node');
        strCode += node_pro.includeClass('EventStore');
        strCode += node_pro.includeClass('Timer');
        flows = newFlows;
        //include
        for (nd in flows) {
            var id = flows[nd].id;
            id = id.replace('.','_');
            var objName = flows[nd].type+'_'+id;
            var className = flows[nd].type;
            strCode += node_pro.includeClass(className);

            if (flows[nd].type == 'inject'){
                if (inject_objName == ''){
                    inject_objName = objName;
                }
                is_inject = true;
            }

            var wires_str = '';

            for(var w in flows[nd].wires){
                if (w == 0){
                    wires_str = flows[nd].wires[w][0]; 
                }
                else{
                    wires_str += '|'+flows[nd].wires[w][0];
                } 
            }
            var obj = {id:flows[nd].id,name:objName,wires:wires_str}
            wiresArray.push(obj);
        }

        //fill wires for setup clear()
        for(var w in wiresArray){
            if (w == 0){
                wiresArray[w].clear = 1; 
            }
            else{
                if (wiresArray[w].wires == wiresArray[w-1].wires){
                   // wiresArray[w-1].clear = 0;
                    wiresArray[w-1].clear = 1;  //edit by 2016-08-31
                }
                else{
                    wiresArray[w-1].clear = 1;
                }
            }
        }

        var arrayBuildLibraries = [];

        //instance
        for (nd in flows) {
            var id = flows[nd].id;
            id = id.replace('.','_');
            var objName = flows[nd].type+'_'+id;
            var className = flows[nd].type;

            strCode += node_pro.generateInstance(className,objName);

            if (flows[nd].type == 'Neurons'){ //single
                if (!checkBuildLibrary(arrayBuildLibraries,"Neurons")){
                    arrayBuildLibraries.push("Neurons");
                }
                
                if (scriptBat == "Common"){
                    scriptBat = "Neurons"; 
                }
                if (scriptBat == "CurieIMU"){
                    scriptBat =  "CurieNeuronsIMU"; 
                }
            }
            if (flows[nd].type == 'Accelerometer' || flows[nd].type == 'Gyro'){ //single
                if (!checkBuildLibrary(arrayBuildLibraries,"CurieIMU")){
                    arrayBuildLibraries.push("CurieIMU");
                }

                if (scriptBat == "Common"){
                    scriptBat = "CurieIMU"; 
                }
                if (scriptBat == "Neurons"){
                    scriptBat =  "CurieNeuronsIMU"; 
                }
            }
            if (flows[nd].type == 'DFServo'){ //single
                if (!checkBuildLibrary(arrayBuildLibraries,"Servo")){
                    arrayBuildLibraries.push("Servo");
                }

                if (scriptBat == "Common"){
                    scriptBat = "Servo"; 
                }
            }
            if (flows[nd].type == 'Ble'){ //single
                if (!checkBuildLibrary(arrayBuildLibraries,"CurieBLE")){
                    arrayBuildLibraries.push("CurieBLE");
                }
            }
            if (flows[nd].type == 'SDWrite'){ //single
                if (!checkBuildLibrary(arrayBuildLibraries,"SPI")){
                    arrayBuildLibraries.push("SPI");
                }
            }
        }
        

        strCode += node_pro.generateQueueList('QueueList','nodes');

        //setup
        strCode += node_pro.generateSetup(flows);
        strCode += node_pro.generateLoop();
        if (is_inject == true){
            strCode += node_pro.generateSerialEvent(inject_objName);
        }
            
        var fileName = 'Ccode_for_curie.ino';
        var inoFile = path.join(__dirname)+'../../../../../../arduino-1.6.9/Ccode_for_curie/'+fileName;
        var batfileName = 'BuildCurieSn.bat';
        var batfilePath = path.join(__dirname)+'../../../../../../arduino-1.6.9/';
        
        
        fs.writeFile(inoFile, strCode, function (err) {
            if (err) {
                throw err;
            }
            console.log("File "+fileName+" is generated success!");

            listArduinoPorts(function (err, ports) {
                var port = '';
                if (ports.length>0){
                    port = ports[0];
                }
                if (port !=''){

                    var batPath = batfilePath+batfileName;
                    
                    //create buildscript.bat
                    buildScriptBat(node,port,fs,arrayBuildLibraries,batfileName,batfilePath);
                }
                else{
                    node.status({fill:"yellow",shape:"dot",text:"Device not found."});
                }
            });
        });
 

        //-----------------------Test Build Script----------------------------//
        function buildScriptBat(_node,_port,_fs,_arrayBuildLibraries,_batfileName,_batfilePath){
            var buildfile = __dirname + '/build.json'; 
            var jsonObj = JSON.parse(_fs.readFileSync(buildfile));  

            var strCode = jsonObj.buildScript.headLines.line1;
            strCode += "\n"+jsonObj.buildScript.headLines.line2;

            //libraries
            var sketch_cpp = jsonObj.buildScript.common.target_cpp.sketch;
            var preproc_cpp = jsonObj.buildScript.common.preproc_cpp;
            var sign1 = jsonObj.buildScript.common.connector.sign1;
            var sign2 = jsonObj.buildScript.common.connector.sign2;
            var sign3 = jsonObj.buildScript.common.connector.sign3;

            var script_g1 = jsonObj.buildScript.common.script_g1;
            var script_g2 = jsonObj.buildScript.common.script_g2;
            var script_gcc1 = jsonObj.buildScript.common.script_gcc1;

            strCode += "\n"+script_g1+sign3+sketch_cpp+sign1+sign2;
            strCode += "\n"+script_g1+sign3+jsonObj.buildScript.common.libraries.QueueList+sign3+sketch_cpp+sign1+sign2;
            //（CurieIUM）
            strCode += "\n"+script_g1+sign3+jsonObj.buildScript.common.libraries.QueueList+sign3+jsonObj.buildScript.common.libraries.CurieTimerOne+sign3+sketch_cpp+sign1+sign2;

            //（CurieNeurons）
            for(var i in _arrayBuildLibraries){
                if (_arrayBuildLibraries[i] == 'Neurons'){
                   strCode += "\n"+script_g1+sign3+jsonObj.buildScript.common.libraries.QueueList+sign3+jsonObj.buildScript.common.libraries.CurieTimerOne+sign3+jsonObj.buildScript.node.Neurons.libraries.CurieNeurons+sign3+sketch_cpp+sign1+sign2;
                }
            }

            //strCode += "\n";
            var targetCpp = jsonObj.buildScript.common.target_cpp;
            for (var script in targetCpp) {
                strCode += "\n"+getCommonLibrariesCode(jsonObj.buildScript,script_g1,_arrayBuildLibraries)+targetCpp[script]+sign1+sign2;
            }

            //strCode += "\n";
            for(var i in _arrayBuildLibraries){
                var k = _arrayBuildLibraries[i];
                var tempTargetCpp = jsonObj.buildScript.node[k].target_cpp;
                for (var script in tempTargetCpp) {
                    strCode += "\n"+getCommonLibrariesCode(jsonObj.buildScript,script_g1,_arrayBuildLibraries)+tempTargetCpp[script]+sign1+sign2;
                }
            }

            strCode += "\n"+getCommonLibrariesCode(jsonObj.buildScript,script_g1,_arrayBuildLibraries)+sketch_cpp+sign1+preproc_cpp;
            //strCode += "\n";
            strCode += "\n"+jsonObj.buildScript.common.script_tools+sign3+preproc_cpp;

            //g++
            //strCode += "\n";
            var targetCppo = jsonObj.buildScript.common.target_cpp_o;
            for (var script in targetCppo) {
                strCode += "\n"+getCommonLibrariesCode(jsonObj.buildScript,script_g2,_arrayBuildLibraries)+targetCpp[script]+sign1+targetCppo[script];
            }

            //strCode += "\n";
            for(var i in _arrayBuildLibraries){
                var k = _arrayBuildLibraries[i];
                var tempTargetCpp = jsonObj.buildScript.node[k].target_cpp;
                var tempTargetCppo = jsonObj.buildScript.node[k].target_cpp_o;
                for (var script in tempTargetCppo) {
                    if (script == 'ss_spi' || script == 'ble_client'){
                        //strCode += "\n";
                       strCode += "\n"+getCommonLibrariesCode(jsonObj.buildScript,script_gcc1,_arrayBuildLibraries)+tempTargetCpp[script]+sign1+tempTargetCppo[script];
                    }
                    else{
                       strCode += "\n"+getCommonLibrariesCode(jsonObj.buildScript,script_g2,_arrayBuildLibraries)+tempTargetCpp[script]+sign1+tempTargetCppo[script];
                    }
                }
            }

            //gcc
            //strCode += "\n";
            var special = jsonObj.buildScript.common.special;
            for (var script in special) {
                if (script == "variant"){
                    strCode += "\n"+jsonObj.buildScript.common.script_g2+sign3+special[script];
                    //strCode += "\n";
                }
                else{
                    strCode += "\n"+jsonObj.buildScript.common.script_gcc1+sign3+special[script];
                }
                
            }

            //g2++
            //strCode += "\n";
            var special2 = jsonObj.buildScript.common.special2;
            for (var script in special2) {
                strCode += "\n"+jsonObj.buildScript.common.script_g2+sign3+special2[script];
            }

            
            //arc-elf32-ar  
            //strCode += "\n";
            var ar = jsonObj.buildScript.common.script_ar;
            for (var script in ar) {
                strCode += "\n"+ar[script];
            }
           
            //gcc2
            //strCode += "\n";
            strCode += "\n"+jsonObj.buildScript.common.script_gcc2; //
            for (var script in targetCppo) {
                strCode += sign3+targetCppo[script];
            }

            for(var i in _arrayBuildLibraries){
                var k = _arrayBuildLibraries[i];
                var tempTargetCppo = jsonObj.buildScript.node[k].target_cpp_o;
                for (var script in tempTargetCppo) {
                    strCode += sign3+tempTargetCppo[script];
                }
            }
             
            strCode += sign3+jsonObj.buildScript.common.special_cpp_o.variant+sign3+jsonObj.buildScript.common.special_cpp_o.core;

            //
            strCode += "\n"+jsonObj.buildScript.common.script_cmd;
            strCode += "\n";

            //copy  
            var copy = jsonObj.buildScript.common.script_copy;
            for (var script in copy) {
                strCode += "\n"+copy[script];
            }
            
            strCode += "\n";
            strCode += "\n"+jsonObj.buildScript.common.script_com.script1;
            strCode += "\n"+jsonObj.buildScript.common.script_com.script2;
            
            var batFile = _batfilePath+_batfileName;
            _fs.writeFile(batFile, strCode, function (err) {
                if (err) {
                    throw err;
                }
                console.log(_batfileName+" is generated success!");
                var input = fs.createReadStream(batFile);
                readLines(_node,input,func,_port,_batfilePath,_batfileName);
            });
        }

        //-------------------build function------------------------------//
        function getCommonLibrariesCode(buildScript,script_g,arrayBuild){
            var strScript = '';
            var libraries = buildScript.common.libraries;
            for (n in libraries) {
                strScript += libraries[n]+buildScript.common.connector.sign3;
            }
            
            if (strScript){
                strScript = script_g+buildScript.common.connector.sign3+ strScript;
                
                for (var i in arrayBuild) {
                    var k = arrayBuild[i];
                    var _libraries = buildScript.node[k].libraries;
                    strScript += getLibrariesCode(buildScript,_libraries);
                }
            }
            return strScript;
        }

        function getLibrariesCode(buildScript,libraries){
            var strScript = '';
            for (n in libraries) {
                strScript += libraries[n]+buildScript.common.connector.sign3;
            }
            return strScript;
        }

        function checkBuildLibrary(libraries,curr){
             for (var i in libraries) {
                  if (curr == libraries[i]){
                      return true;
                  }
             }
             return false;
        }


        //-----------------function-----------------//  
        function setHeaderNode(_flows,nodeName){
        	var firstWiresNode = '';
            for (n in _flows) {
            	if (_flows[n].type == nodeName){
            		firstWiresNode = _flows[n];
            		break;
            	}
            }

            if (firstWiresNode != ''){
            	for (n in _flows) {
	        		var wires = _flows[n].wires[0];
	        		for (w in wires) {
		                if (wires[w] == firstWiresNode.id){
		                    var parentsWires = _flows[n].wires[0];
		                    parentsWires.splice(w,1);
		                    parentsWires.unshift(firstWiresNode.id);
		                    break;
		                }
	        		}

		        }
            }

            newFlows = _flows;
        }

        function getNodeFlow(flows,node){
            for (n in flows) {
                if (node.type == flows[n].type && node.id == flows[n].id){
                    return flows[n];
                }
            }
            return undefined;
        }


        //-----------------API----------------------//
        function readLines(node,input,func,port,_batfilePath,_batfileName) {
            var remaining = '';
            input.on('data', function(data) {
                remaining += data;
                var index = remaining.indexOf('\n');
                while (index > -1) {
                    var line = remaining.substring(0, index);
                    remaining = remaining.substring(index + 1);
                    func(line,port);
                    index = remaining.indexOf('\n');
                }
            });
             
            input.on('end', function() {
                if (remaining.length > 0) {
                    func(remaining,port);
                }

                var strCode = '';
                for (var i = 0;i<container.length;i++) {
                    strCode += container[i]+'\n';
                }
                    
                var batPath = _batfilePath+_batfileName;
                fs.writeFile(batPath, strCode, function (err) {
                    if (err) {
                        throw err;
                    }
                    console.log("File "+_batfileName+"'COM is update success!");
                    //delOutputRecursive(fs,_batfilePath+'OutputCurieSn',true);
                    execBat(node,_batfilePath,_batfileName);
                });
            });        
        }

        function delOutputRecursive(_fs,_path,isRoot){
            var folder_exists = _fs.existsSync(_path);
            if (folder_exists == true){
                var dirList = _fs.readdirSync(_path);
                dirList.forEach(function(fileName){
                    var currPath = _path + '/' + fileName;
                    if (_fs.statSync(currPath).isDirectory()) { // recurse
                        delOutputRecursive(_fs,currPath,false);
                        
                    } 
                    else{ // delete file
                        _fs.unlinkSync(currPath);
                    }
                });
                if (isRoot == false){
                    //_fs.rmdirSync(_path);
                }
            }
        }
        
        function func(data,port) {
            //mode com19 baud=1200 parity=n data=8 stop=1   verbose
            var index = data.indexOf('baud=1200 parity=n data=8 stop=1');
            var index2 = data.indexOf('OutputCurieSn/Ccode_for_curie.ino.bin COM');
            if (index != -1){
                var char_txt = 'mode';
                var length = char_txt.length;
                var index_1 = data.indexOf('mode');
                var index_2 = data.indexOf('baud');
                var txt = data.substring(index_1+length+1, index_2-1);
                txt = data.replace(txt,port);

                container.push(txt);
            }
            else if (index2 != -1){
                var char_txt = 'Ccode_for_curie.ino.bin';
                var length = char_txt.length;
                var index_1 = data.indexOf('Ccode_for_curie.ino.bin');
                var index_2 = data.indexOf('verbose');
                var txt = data.substring(index_1+length+1, index_2-1);
                txt = data.replace(txt,port);
                container.push(txt);
            } 
            else{
                container.push(data);
            }
        }


        /*arduino port*/
        function listArduinoPorts(callback) {
            return serialport.list(function(err, ports) {
                if (err) {
                    return callback(err);
                }
                var devices = [];
                for (var i = 0; i < ports.length; i++) {
                    if (/usb|acm|com\d+/i.test(ports[i].comName)) {
                        devices.push(ports[i].comName);
                    }
                }
                return callback(null, devices);
            });
        }

        function execBat(e,_batfilePath,_batfileName){
            var progress = 0;
            var progress_rate = 0;
            var progress_limit = 98;
            var found_device_count = 0;
            var status = 'start';
            e.status({fill:"green",shape:"ring",text:"Starting compile..."+progress});
            var cp = require('child_process');
            //var cmd = 'D: && cd D:\\nodejs\\arduino-1.6.9 && BuildCurieSn.bat';

            var cmd = 'cd '+_batfilePath+ ' && '+_batfileName;
            //console.log(cmd);

            var options =  {
                encoding: 'utf8',
                timeout: 0,
                maxBuffer: 1000*1024,
                killSignal: 'SIGTERM',
                cwd: null,
                env: null
            };

            var ls = cp.exec(cmd,options);
            ls.stdout.on('data', function (data) {
               // console.log('stdout: ' + data);
                if (data.indexOf('Starting download script...') != -1){
                    progress = 100;
                    progress_rate = progress+'%';
                    e.status({fill:"green",shape:"dot",text:"Compile completed "+progress_rate});
                }
                else if (data.indexOf('Waiting for device...') != -1){
                    found_device_count++;
                    e.status({fill:"green",shape:"dot",text:"Compile completed "+progress_rate});
                }

                if (found_device_count > 0){
                    if (data.indexOf('ERROR: Device is not responding.') != -1){
                        status = 'end';
                        e.status({fill:"yellow",shape:"dot",text:"Device is not responding."});
                    }
                    else if (data.indexOf('Download done.') != -1){
                        //globalCompileStatus = "finished";
                        for (var i in globalArrayInjects) {
                            globalArrayInjects[i].status = "finished";
                        }
                        status = 'end';
                        e.status({fill:"green",shape:"dot",text:"Download done."});
                    }
                    if(status == 'start'){
                        e.status({fill:"red",shape:"dot",text:"Starting download script..."});
                    }
                }

                if (progress < progress_limit){
                    progress++;
                    progress_rate = progress+'%';
                    e.status({fill:"green",shape:"dot",text:"Starting compile..."+progress_rate});
                }
                //console.log(progress);
            });

            ls.stderr.on('data', function (data) {
                //console.log('stderr: ' + data);
            });

            ls.on('close', function (code) {
                console.log('child process closed '+code);
            });
            ls.on('exit', function (code) {
                console.log('child process exited with code ' + code);
            }); 
        }
    }

    RED.nodes.registerType("interpreter", interpreterNode);
}

